first testcase :- 4 4 0 1 1 0 2 2 2 3 1 1 3 4

-----------------Dijkstra's Algorithm--------------------
Enter no of nodes : 
4
Enter no of edges : 
4
Enter edge => (start node, end node, weight)
0 1 1
Enter edge => (start node, end node, weight)
0 2 2
Enter edge => (start node, end node, weight)
2 3 1
Enter edge => (start node, end node, weight)
1 3 4

Adjacency list : 
0 ->  [1, 1],  [2, 2], 
1 ->  [0, 1],  [3, 4], 
2 ->  [0, 2],  [3, 1], 
3 ->  [2, 1],  [1, 4], 

To find the shortest path enter source node : 
0
The shortest path : 
0 1 2 3 

=> second test case :- 5 8 0 1 3 0 2 2 1 2 1 1 3 4 2 3 5 2 4 2 3 4 1 4 0 3

-----------------Dijkstra's Algorithm--------------------
Enter no of nodes : 
5 8 0 1 3 0 2 2 1 2 1 1 3 4 2 3 5 2 4 2 3 4 1 4 0 3
Enter no of edges : 
Enter edge => (start node, end node, weight)
Enter edge => (start node, end node, weight)
Enter edge => (start node, end node, weight)
Enter edge => (start node, end node, weight)
Enter edge => (start node, end node, weight)
Enter edge => (start node, end node, weight)
Enter edge => (start node, end node, weight)
Enter edge => (start node, end node, weight)

Adjacency list : 
0 ->  [1, 3],  [2, 2],  [4, 3], 
1 ->  [0, 3],  [2, 1],  [3, 4], 
2 ->  [0, 2],  [1, 1],  [3, 5],  [4, 2], 
3 ->  [1, 4],  [2, 5],  [4, 1], 
4 ->  [2, 2],  [3, 1],  [0, 3], 

To find the shortest path enter source node : 
0
The shortest path : 
0 3 2 4 3 
